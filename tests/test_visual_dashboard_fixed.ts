import { RiskScoringEngine } from './src/ai/riskScoringEngine';
import { DashboardServer, DashboardConfig } from './src/visualization/dashboardServer';
import { logger } from './src/utils/logger';

async function testVisualDashboardFixed() {
    console.log('\nüåü Visual Risk Map with D3.js Interactive Dashboard - Fixed Version\n');
    console.log('=' .repeat(80));

    try {
        // Initialize AI/ML Risk Scoring Engine
        console.log('\nüöÄ Initializing AI/ML Risk Scoring Engine...');
        const riskEngine = new RiskScoringEngine();
        
        console.log('‚è≥ Loading TensorFlow.js models...');
        await riskEngine.initialize();
        console.log('‚úÖ AI/ML Risk Scoring Engine ready!');

        // Configure dashboard server
        const dashboardConfig: DashboardConfig = {
            port: 3000,
            host: 'localhost',
            corsOrigins: ['http://localhost:3000', 'http://127.0.0.1:3000'],
            updateInterval: 5000 // 5-second real-time updates
        };

        // Initialize dashboard server
        console.log('\nüìä Initializing Visual Dashboard Server...');
        const dashboardServer = new DashboardServer(dashboardConfig, riskEngine);
        
        console.log('‚è≥ Starting web server and WebSocket connections...');
        await dashboardServer.start();
        
        console.log('\nüéâ Visual Risk Dashboard Successfully Launched!');
        console.log('=' .repeat(60));
        
        // Dashboard access information
        console.log('\nüåê Dashboard Access Information:');
        console.log(`  üìç Main Dashboard: http://${dashboardConfig.host}:${dashboardConfig.port}`);
        console.log(`  üîå WebSocket Endpoint: ws://${dashboardConfig.host}:${dashboardConfig.port}`);
        console.log(`  üîÑ Real-time Updates: Every ${dashboardConfig.updateInterval / 1000} seconds`);
        
        // API endpoints information
        console.log('\nüöÄ Available API Endpoints:');
        console.log('  üìà GET /api/health - Server health status');
        console.log('  üìä GET /api/risk/portfolio - Risk portfolio analysis');
        console.log('  üå°Ô∏è  GET /api/risk/heatmap - Interactive risk heatmap data');
        console.log('  ü§ñ GET /api/risk/insights - AI/ML security insights');
        console.log('  üìà GET /api/risk/timeline - Risk timeline data');
        console.log('  üìã GET /api/risk/metrics - Dashboard metrics');
        console.log('  üîç GET /api/risk/vulnerability/:id - Individual vulnerability details');
        console.log('  üéØ POST /api/risk/score - Calculate risk score for vulnerability');
        console.log('  üìä GET /api/model/metrics - TensorFlow.js model performance');

        // Test API endpoints
        console.log('\nüß™ Testing API Endpoints:');
        
        try {
            // Test health endpoint
            const healthResponse = await fetch(`http://${dashboardConfig.host}:${dashboardConfig.port}/api/health`);
            const healthData = await healthResponse.json();
            console.log('  ‚úÖ Health Check: API is operational');
            console.log(`     Status: ${healthData.status}`);
            console.log(`     Version: ${healthData.version}`);
        } catch (error) {
            console.log('  ‚ùå Health Check failed');
        }

        try {
            // Test portfolio endpoint
            const portfolioResponse = await fetch(`http://${dashboardConfig.host}:${dashboardConfig.port}/api/risk/portfolio`);
            const portfolioData = await portfolioResponse.json();
            
            if (portfolioData.success && portfolioData.data) {
                const data = portfolioData.data as any;
                console.log('  ‚úÖ Portfolio Data: Available');
                console.log(`     üìä Total Endpoints: ${data.totalEndpoints || 0}`);
                console.log(`     üîç Vulnerable Endpoints: ${data.vulnerableEndpoints || 0}`);
                console.log(`     üìà Compliance Score: ${data.complianceStatus?.complianceScore || 0}%`);
            }
        } catch (error) {
            console.log('  ‚ùå Portfolio endpoint test failed');
        }

        try {
            // Test model metrics endpoint  
            const metricsResponse = await fetch(`http://${dashboardConfig.host}:${dashboardConfig.port}/api/model/metrics`);
            const metricsData = await metricsResponse.json();
            
            if (metricsData.success && metricsData.data) {
                const data = metricsData.data as any;
                console.log('  ‚úÖ AI Model Metrics: Available');
                console.log(`     üéØ Model Accuracy: ${(data.accuracy * 100).toFixed(1)}%`);
                console.log(`     üìä Training Samples: ${data.trainedSamples?.toLocaleString() || 0}`);
                console.log(`     üî¨ F1 Score: ${(data.f1Score * 100).toFixed(1)}%`);
            }
        } catch (error) {
            console.log('  ‚ùå Model metrics endpoint test failed');
        }

        // Dashboard features
        console.log('\n‚ú® Interactive Dashboard Features:');
        console.log('  üó∫Ô∏è  Interactive Risk Network Map with D3.js force simulation');
        console.log('  üå°Ô∏è  Risk Heatmap with color-coded vulnerability severity');
        console.log('  üìà Real-time Risk Timeline with multi-category tracking');
        console.log('  üìä Live Metrics Dashboard with animated cards');
        console.log('  ü§ñ AI/ML Security Insights with confidence scores');
        console.log('  üîÑ Real-time Updates via WebSocket connections');
        console.log('  üéØ Interactive tooltips and zoom functionality');
        console.log('  üì± Responsive design for desktop and mobile');

        // WebSocket features
        console.log('\nüîå WebSocket Real-time Features:');
        console.log('  ‚Ä¢ Automatic connection status monitoring');
        console.log('  ‚Ä¢ Real-time risk metric updates every 5 seconds');
        console.log('  ‚Ä¢ Live AI insight generation and broadcasting');
        console.log('  ‚Ä¢ Interactive client subscription management');
        console.log('  ‚Ä¢ Automatic reconnection on connection loss');

        // Performance and scalability
        console.log('\n‚ö° Performance Features:');
        console.log('  ‚Ä¢ Client-side D3.js rendering for smooth interactions');
        console.log('  ‚Ä¢ WebSocket-based real-time updates (low latency)');
        console.log('  ‚Ä¢ Efficient data streaming and caching');
        console.log('  ‚Ä¢ Responsive design with CSS Grid and Flexbox');
        console.log('  ‚Ä¢ Optimized TensorFlow.js model inference');
        console.log('  ‚Ä¢ Automatic error handling and recovery');

        // User interaction guide
        console.log('\nüëÜ Interactive Usage Guide:');
        console.log('  1. üåê Open http://localhost:3000 in your web browser');
        console.log('  2. üéõÔ∏è  Use the control buttons to refresh visualizations');
        console.log('  3. ‚ñ∂Ô∏è  Toggle real-time mode for live updates');
        console.log('  4. üñ±Ô∏è  Hover over elements for detailed tooltips');
        console.log('  5. üîç Zoom and pan the network map for exploration');
        console.log('  6. üìä Click on metric cards for detailed breakdowns');
        console.log('  7. ü§ñ Review AI insights for strategic recommendations');

        // Keep the process alive for demonstration
        console.log('\nüéØ Dashboard Demo Status:');
        console.log('‚úÖ AI/ML Risk Scoring Engine: Operational');
        console.log('‚úÖ TensorFlow.js Models: Loaded and Ready');
        console.log('‚úÖ Web Server: Running on port 3000');
        console.log('‚úÖ WebSocket Server: Real-time connections active');
        console.log('‚úÖ D3.js Visualizations: Interactive and responsive');
        console.log('‚úÖ Sample Data: Loaded with sample vulnerabilities');

        console.log('\nüéä Visual Risk Dashboard is now live and ready for exploration!');
        console.log('üåê Visit http://localhost:3000 to see the interactive dashboard');
        console.log('üìä The dashboard will continue running with real-time updates...');
        
        // Keep the process alive for demonstration
        process.on('SIGINT', async () => {
            console.log('\n\nüõë Shutting down Visual Risk Dashboard...');
            await dashboardServer.stop();
            console.log('‚úÖ Dashboard server stopped gracefully');
            process.exit(0);
        });

        console.log('\nüí° Press Ctrl+C to stop the dashboard server');

        // Keep alive
        await new Promise(() => {}); // Run indefinitely

    } catch (error: any) {
        console.error(`\n‚ùå Visual Dashboard test failed: ${error.message}`);
        console.error(error.stack);
        process.exit(1);
    }
}

// Run the fixed visual dashboard demo
testVisualDashboardFixed().catch(console.error); 